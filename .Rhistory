library(datasets)
data(iris)
? iris
iris
?rowMeans
rowMeans(iris, na.rm=TRUE)
rowMeans(iris, na.rm=TRUE)
rowMeans(iris, na.rm=TRUE, dims=2)
rowMeans(iris, na.rm=TRUE, dims=1)
apply(iris, 2)
apply(iris, 2,mean)
apply(iris, 2,mean, na.rm=TRUE)
iris
x  <- iris["virginica",1]
x
x  <- iris[Species =="virginica",1]
solovirginica  <-  iris[,"virginica"]
iris
v  <-  iris[Species=="viriginica"]
v  <-  iris[,Species=="viriginica"]
v  <-  iris[,Species=="virginica"]
v  <- iris$Species
v
y  <-  v=="virginica"
v
y
iris
iris$Sepal.Length[y]
mean(iris$Sepal.Length[y])
write.csv(iris,"c:/x/iris.csv")
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
apply(iris[,1:4],2,mean)
?apply
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
sapply(mtcars, cyl, mean)
lapply(mtcars,mean)
tapply(mtcars$mpg,mtcars$cyl, mean)
apply(mtcars,2,mean)
tapply(mtcars$mpg,mtcars$cyl, mean)
r <- tapply(mtcars$mpg,mtcars$cyl, mean)
r$8 - r$4
r$"8" - r$"4"
r
r[1,4]-r[1,8]
r[1,1]-r[1,3]
r
r[3]-r[1]
debug(ls)
ls
ls()
q
cont
tapply(mtcars$hp,mtcars$cyl, mean)
r  <- tapply(mtcars$hp,mtcars$cyl, mean)
r[3]-r[1]
? rbinom
q()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2  <-  as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2  <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B, %d, %Y %H:%M")
t3 <- "Octubre 17, 1986 08:24"
t4 <- strptime(t3,"%B, %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3,"%B %d, %Y %H:%M")
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
? cars
head(cars)
plot(cars)
? plot
plot( x= cars$speed, y=cars$dist)
plot( y= cars$speed, x=cars$dist)
plot( x= cars$speed, y=cars$dist)
plot( x= cars$speed, y=cars$dist, xlab="Speed")
plot( x= cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab = "Stopping Distance",main="My Plot")
plot(cars ,main="My Plot")
plot(cars ,sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars,  xlim=c(10,15))
plot(cars,  pch=2)
data(mtcars)
? boxplot
boxplot("mpg ~ cyl",ctcars)
boxplot("mpg ~ cyl",mtcars)
boxplot("mpg ~ cyl",mtcars)
boxplot(formula="mpg ~ cyl",data=mtcars)
boxplot(mtcars, formula="mpg ~ cyl")
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "35adeaa7d462b2653c23",
secret = "12f070689d5e38b4a133f65fa2e6b3c033de33a8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
q()
install.packages("httpuv")
library(swirl)
swirl()
swirl()
quit()
library(swirdl)
library(swirl)
swirl()
install_from_swirl("Getting_and_Cleaning_Data)
;
""
;
q
;;;
''
"
install_from_swirl("Getting_and_Cleaning_Data")
swirl()
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
write.csv(sampleTimes,"/q3/sampletimes.csv")
library(swirl)
swirl()
mydf <- read.csv(path2csv,stringAsFactors=FALSE)
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
? select
select(crean, ip_id, package, country)
select(cran, ip_id, package, country)
5:20
select(cran r_arch:country)
select(cran,\ r_arch:country)
select(cran,\ r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran , -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter( cra, r_version == "3.1.1" country=="US")
filter( cran, r_version == "3.1.1" country=="US")
filter( cran, r_version == "3.1.1",country=="US")
?Comparison
filter( cran, r_version == "3.0.1",country=="IN")
filter( cran, r_version <= "3.0.1",country=="IN")
filter( cran, r_version <= "3.0.2",country=="IN")
filter(cran, country == "US" | country == "IN")
filter(cran , r_os == "linux-gnu", size > 100500 )
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran , r_os == "linux-gnu", size > 100500 , !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select( cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, desc(country), desc(r_version), ip_id)
| arrange(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb= size_mb/2^10)
mutate(cran3, correct_size= size + 100)
mutate(cran3, correct_size= size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
? group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package, avg=mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count >= 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
library swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
quit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?panel.abline
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
? geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
?qplot
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r, echo=TRUE}
# Set the working directory
library(dplyr,quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE)
library(ggplot2)
activity.file  <-  read.csv2("activity.csv",header=TRUE,sep=",")
activity <- activity.file[ ! is.na(activity.file$steps)    , ]
daily <- summarise( group_by(activity,date), steps=sum(steps), mean=mean(steps))
by.interval <- summarise( group_by(activity,interval), mean.steps=mean(steps))
```
## What is mean total number of steps taken per day?
#### 1) Make a histogram of the total number of steps taken each day
```{r, echo=TRUE}
qplot(daily$steps, geom="histogram", binwidth=1000, main="Daily Steps Count", xlab="Steps", ylab="Count")
```
#### 2) Calculate and report the mean and median total number of steps taken per day
#####a) Mean
```{r, echo=TRUE}
mean(daily$steps)
```
#####b) Median
```{r, echo=TRUE}
median(daily$steps)
```
## What is the average daily activity pattern?
#####1) Make a histogram of the total number of steps taken each day
```{r, echo=TRUE}
qplot( interval, mean.steps, data=by.interval, geom="line", xlab="Interval",ylab="Mean Steps")
```
#####2) Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE}
by.interval$interval[by.interval$mean.steps==max(by.interval$mean.steps)]
```
## Imputing missing values
#####a) Calculate and report the total number of missing values in the dataset(i.e. the total number of rows with NAS)
```{r, echo=TRUE}
sum( is.na(activity.file$steps)  )
```
#####b) Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/medan for that day, or the mean for that 5-minute interval, etc
```{r, echo=TRUE}
```
## Are there differences in activity patterns between weekdays and weekends?
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r, echo=TRUE}
# Set the working directory
library(dplyr,quietly=TRUE, warn.conflicts = FALSE, verbose=FALSE)
library(ggplot2)
activity.file  <-  read.csv2("activity.csv",header=TRUE,sep=",")
activity <- activity.file[ ! is.na(activity.file$steps)    , ]
daily <- summarise( group_by(activity,date), steps=sum(steps), mean=mean(steps))
by.interval <- summarise( group_by(activity,interval), mean.steps=mean(steps))
```
## What is mean total number of steps taken per day?
#### 1) Make a histogram of the total number of steps taken each day
```{r, echo=TRUE}
qplot(daily$steps, geom="histogram", binwidth=1000, main="Daily Steps Count", xlab="Steps", ylab="Count")
```
#### 2) Calculate and report the mean and median total number of steps taken per day
#####a) Mean
```{r, echo=TRUE}
mean(daily$steps)
```
#####b) Median
```{r, echo=TRUE}
median(daily$steps)
```
## What is the average daily activity pattern?
#####1) Make a histogram of the total number of steps taken each day
```{r, echo=TRUE}
qplot( interval, mean.steps, data=by.interval, geom="line", xlab="Interval",ylab="Mean Steps")
```
#####2) Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE}
by.interval$interval[by.interval$mean.steps==max(by.interval$mean.steps)]
```
## Imputing missing values
#####a) Calculate and report the total number of missing values in the dataset(i.e. the total number of rows with NAS)
```{r, echo=TRUE}
sum( is.na(activity.file$steps)  )
```
#####b) Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc
```{r, echo=TRUE}
#activity.file[is.na(activity.file$steps),steps] <-
```
## Are there differences in activity patterns between weekdays and weekends?
qplot(interval, steps,  data=alldays,  geom="line", facets =daytype~., color=daytype)
setwd("c:/c5p1")
